pip install --upgrade tensorflow

from __future__ import print_function
import numpy as np
import tensorflow
from tensorflow import keras
from keras import callbacks
from sklearn.manifold import TSNE
import time
import json
import warnings
import sys
import monitor_api


from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils

batch_size = 64
nb_classes = 10
nb_epoch = 5
data_augmentation = True

# input image dimensions
img_rows, img_cols = 32, 32
# the CIFAR10 images are RGB
img_channels = 3

# he_normal
initialize = "uniform"

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = np.loadtxt(overallstr4backup.csv, delimiter=';')
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)

model = Sequential()
model.add(Convolution2D(32, 3, 3, border_mode='same', input_shape=(img_channels, img_rows, img_cols), init=initialize))
convout1 = Activation('relu')
model.add(convout1)
model.add(MaxPooling2D((2,2), strides=(2,2)))

model.add(Convolution2D(64, 3, 3, border_mode='same', init=initialize))
convout2 = Activation('relu') 
model.add(convout2)

model.add(Convolution2D(64, 3, 3, border_mode='same', init=initialize))
convout3 = Activation('relu') 
model.add(convout3)
model.add(MaxPooling2D((2,2), strides=(2,2)))

# model.add(Convolution2D(128, 3, 3, border_mode='same', init='he_normal'))
# convout4 = Activation('relu') 
# model.add(convout4)
# model.add(Convolution2D(128, 3, 3, border_mode='same', init='he_normal'))
# convout5 = Activation('relu') 
# model.add(convout5)
# model.add(MaxPooling2D((2,2), strides=(2,2)))

model.add(Flatten())
model.add(Dense(128, init=initialize))
fcout1 = Activation('relu')
model.add(fcout1)
model.add(Dense(nb_classes, init=initialize))

softmaxout = Activation('softmax')
model.add(softmaxout)

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
#sgd = SGD(lr=0.001, momentum=0.0, decay=0.0, nesterov=False)
#sgd = keras.optimizers.Adagrad(lr=0.01, epsilon=1e-08)

model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, Y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              validation_data=(X_test, Y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')

# this will do preprocessing and realtime data augmentation
datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images

# compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
datagen.fit(X_train)

# fit the model on the batches generated by datagen.flow()
#fit_generator(self, generator, samples_per_epoch, nb_epoch, verbose=1, callbacks=[], validation_data=None, nb_val_samples=None, class_weight=None, max_q_size=10, nb_worker=1, pickle_safe=False)

init_weight = model.get_weights()
i = 37
input_img = X_train[i:i+1]
convout_list= [convout1, convout2, convout3, fcout1, softmaxout]

model_remote = monitor_api.ModelRemote(root='http://localhost:5000', old_weight=init_weight, convout_list=convout_list, input_img=input_img)
graph_remote = monitor_api.GraphRemote(root='http://localhost:5000', old_weight=init_weight)
filter_remote = monitor_api.FilterChangeRemote(root='http://localhost:5000')

#tensor = callbacks.TensorBoard(log_dir='./logs', histogram_freq=0, write_graph=True)


    
if __name__ == "__main__":
    history = model.fit_generator(datagen.flow(X_train, Y_train,
                    batch_size=batch_size),
                    verbose=2,
                    samples_per_epoch=X_train.shape[0],
                    nb_epoch=10,
                    validation_data=(X_test, Y_test),
                    callbacks=[model_remote, graph_remote, filter_remote])

